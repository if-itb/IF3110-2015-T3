
package service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "StackExchangeService", targetNamespace = "http://service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface StackExchangeService {


    /**
     * 
     * @return
     *     returns java.util.List<service.Question>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllQuestion", targetNamespace = "http://service/", className = "service.GetAllQuestion")
    @ResponseWrapper(localName = "getAllQuestionResponse", targetNamespace = "http://service/", className = "service.GetAllQuestionResponse")
    @Action(input = "http://service/StackExchangeService/getAllQuestionRequest", output = "http://service/StackExchangeService/getAllQuestionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/getAllQuestion/Fault/Exception")
    })
    public List<Question> getAllQuestion()
        throws Exception_Exception
    ;

    /**
     * 
     * @param qid
     * @param token
     * @param expirationDate
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteQuestion", targetNamespace = "http://service/", className = "service.DeleteQuestion")
    @ResponseWrapper(localName = "deleteQuestionResponse", targetNamespace = "http://service/", className = "service.DeleteQuestionResponse")
    @Action(input = "http://service/StackExchangeService/deleteQuestionRequest", output = "http://service/StackExchangeService/deleteQuestionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/deleteQuestion/Fault/Exception")
    })
    public String deleteQuestion(
        @WebParam(name = "qid", targetNamespace = "")
        int qid,
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "expirationDate", targetNamespace = "")
        long expirationDate)
        throws Exception_Exception
    ;

    /**
     * 
     * @param qtopic
     * @param qcontent
     * @param name
     * @param qid
     * @param email
     * @param token
     * @param expirationDate
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editQuestion", targetNamespace = "http://service/", className = "service.EditQuestion")
    @ResponseWrapper(localName = "editQuestionResponse", targetNamespace = "http://service/", className = "service.EditQuestionResponse")
    @Action(input = "http://service/StackExchangeService/editQuestionRequest", output = "http://service/StackExchangeService/editQuestionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/editQuestion/Fault/Exception")
    })
    public String editQuestion(
        @WebParam(name = "qid", targetNamespace = "")
        int qid,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "qtopic", targetNamespace = "")
        String qtopic,
        @WebParam(name = "qcontent", targetNamespace = "")
        String qcontent,
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "expirationDate", targetNamespace = "")
        long expirationDate)
        throws Exception_Exception
    ;

    /**
     * 
     * @param qid
     * @return
     *     returns service.Question
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getQuestion", targetNamespace = "http://service/", className = "service.GetQuestion")
    @ResponseWrapper(localName = "getQuestionResponse", targetNamespace = "http://service/", className = "service.GetQuestionResponse")
    @Action(input = "http://service/StackExchangeService/getQuestionRequest", output = "http://service/StackExchangeService/getQuestionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/getQuestion/Fault/Exception")
    })
    public Question getQuestion(
        @WebParam(name = "qid", targetNamespace = "")
        int qid)
        throws Exception_Exception
    ;

    /**
     * 
     * @param qid
     * @return
     *     returns java.util.List<service.Answer>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAnswers", targetNamespace = "http://service/", className = "service.GetAnswers")
    @ResponseWrapper(localName = "getAnswersResponse", targetNamespace = "http://service/", className = "service.GetAnswersResponse")
    @Action(input = "http://service/StackExchangeService/getAnswersRequest", output = "http://service/StackExchangeService/getAnswersResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/getAnswers/Fault/Exception")
    })
    public List<Answer> getAnswers(
        @WebParam(name = "qid", targetNamespace = "")
        int qid)
        throws Exception_Exception
    ;

    /**
     * 
     * @param name
     * @param qid
     * @param email
     * @param content
     * @param token
     * @param expirationDate
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createAnswer", targetNamespace = "http://service/", className = "service.CreateAnswer")
    @ResponseWrapper(localName = "createAnswerResponse", targetNamespace = "http://service/", className = "service.CreateAnswerResponse")
    @Action(input = "http://service/StackExchangeService/createAnswerRequest", output = "http://service/StackExchangeService/createAnswerResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/createAnswer/Fault/Exception")
    })
    public String createAnswer(
        @WebParam(name = "qid", targetNamespace = "")
        int qid,
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "content", targetNamespace = "")
        String content,
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "expirationDate", targetNamespace = "")
        long expirationDate)
        throws Exception_Exception
    ;

    /**
     * 
     * @param qid
     * @param operation
     * @param token
     * @param expirationDate
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "voteQuestion", targetNamespace = "http://service/", className = "service.VoteQuestion")
    @ResponseWrapper(localName = "voteQuestionResponse", targetNamespace = "http://service/", className = "service.VoteQuestionResponse")
    @Action(input = "http://service/StackExchangeService/voteQuestionRequest", output = "http://service/StackExchangeService/voteQuestionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/voteQuestion/Fault/Exception")
    })
    public int voteQuestion(
        @WebParam(name = "qid", targetNamespace = "")
        int qid,
        @WebParam(name = "operation", targetNamespace = "")
        String operation,
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "expirationDate", targetNamespace = "")
        long expirationDate)
        throws Exception_Exception
    ;

    /**
     * 
     * @param aid
     * @param operation
     * @param token
     * @param expirationDate
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "voteAnswer", targetNamespace = "http://service/", className = "service.VoteAnswer")
    @ResponseWrapper(localName = "voteAnswerResponse", targetNamespace = "http://service/", className = "service.VoteAnswerResponse")
    @Action(input = "http://service/StackExchangeService/voteAnswerRequest", output = "http://service/StackExchangeService/voteAnswerResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/voteAnswer/Fault/Exception")
    })
    public int voteAnswer(
        @WebParam(name = "aid", targetNamespace = "")
        int aid,
        @WebParam(name = "operation", targetNamespace = "")
        String operation,
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "expirationDate", targetNamespace = "")
        long expirationDate)
        throws Exception_Exception
    ;

    /**
     * 
     * @param userPassword
     * @param userEmail
     * @param userName
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "registerUser", targetNamespace = "http://service/", className = "service.RegisterUser")
    @ResponseWrapper(localName = "registerUserResponse", targetNamespace = "http://service/", className = "service.RegisterUserResponse")
    @Action(input = "http://service/StackExchangeService/registerUserRequest", output = "http://service/StackExchangeService/registerUserResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/registerUser/Fault/Exception")
    })
    public String registerUser(
        @WebParam(name = "userName", targetNamespace = "")
        String userName,
        @WebParam(name = "userEmail", targetNamespace = "")
        String userEmail,
        @WebParam(name = "userPassword", targetNamespace = "")
        String userPassword)
        throws Exception_Exception
    ;

    /**
     * 
     * @param qtopic
     * @param qcontent
     * @param name
     * @param email
     * @param token
     * @param expirationDate
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createQuestion", targetNamespace = "http://service/", className = "service.CreateQuestion")
    @ResponseWrapper(localName = "createQuestionResponse", targetNamespace = "http://service/", className = "service.CreateQuestionResponse")
    @Action(input = "http://service/StackExchangeService/createQuestionRequest", output = "http://service/StackExchangeService/createQuestionResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://service/StackExchangeService/createQuestion/Fault/Exception")
    })
    public String createQuestion(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "qtopic", targetNamespace = "")
        String qtopic,
        @WebParam(name = "qcontent", targetNamespace = "")
        String qcontent,
        @WebParam(name = "token", targetNamespace = "")
        String token,
        @WebParam(name = "expirationDate", targetNamespace = "")
        long expirationDate)
        throws Exception_Exception
    ;

}
